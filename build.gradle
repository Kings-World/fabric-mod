plugins {
  id "java"
  id "fabric-loom" version "0.12-SNAPSHOT"
  id "com.github.johnrengelman.shadow" version "7.1.2"
  id "com.github.breadmoirai.github-release" version "2.3.7"
  id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = archives_base_name
version = mod_version
group = maven_group

repositories {
  // Add repositories to retrieve artifacts from in here.
  // You should only use this when depending on other mods because
  // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
  // See https://docs.gradle.org/current/userguide/declaring_repositories.html
  // for more information about repositories.
  maven {
    url "https://oss.sonatype.org/content/repositories/snapshots"
  }
  maven {
    name = "henkelmax.public"
    url = "https://maven.maxhenkel.de/repository/public"
  }
}

dependencies {
  minecraft "com.mojang:minecraft:$minecraft_version"
  mappings "net.fabricmc:yarn:$yarn_mappings:v2"
  modImplementation "net.fabricmc:fabric-loader:$loader_version"

  // Fabric API. This is technically optional, but you probably want it anyway.
  modImplementation "net.fabricmc.fabric-api:fabric-api:$fabric_version"
  modImplementation "me.lucko:fabric-permissions-api:$perms_version"

  // Uncomment the following line to enable the deprecated Fabric API modules.
  // These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

  // modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

  implementation "de.maxhenkel.configbuilder:configbuilder:$configbuilder_version"
  implementation "club.minnced:discord-webhooks:$webhooks_version"
  implementation("net.dv8tion:JDA:$jda_version") {
    exclude module: "opus-java"
  }

  shadow "de.maxhenkel.configbuilder:configbuilder:$configbuilder_version"
  shadow "club.minnced:discord-webhooks:$webhooks_version"
  shadow("net.dv8tion:JDA:$jda_version") {
    exclude module: "opus-java"
  }
}

processResources {
  inputs.property "version", project.version

  filesMatching("fabric.mod.json") {
    expand "version": project.version
  }
}

tasks.withType(JavaCompile).configureEach {
  it.options.encoding = "UTF-8"
  it.options.release = 17
}

java {
  // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
  // if it is present.
  // If you remove this line, sources will not be generated.
  withSourcesJar()
}

jar {
  from("LICENSE") {
    rename { "${it}_${project.archivesBaseName}"}
  }
}

//def getBranch() {
//  if (grgit == null)
//    return "unknown"
//
//  def branch
//  if (System.getenv("GITHUB_REF")) {
//    branch = System.getenv("GITHUB_REF")
//  } else {
//    branch = grgit.branch.current().name
//  }
//
//  return branch.substring(branch.lastIndexOf("/") + 1)
//}

//import org.kohsuke.github.GHReleaseBuilder
//import org.kohsuke.github.GitHub

//task github(group: "publishing", dependsOn: build) {
//  onlyIf { System.getenv("GITHUB_TOKEN") }
//
//  doLast {
//    def github = GitHub.connectUsingOAuth(System.getenv("GITHUB_TOKEN"))
//    def repo = github.getRepository(System.getenv("GITHUB_REPO"))
//
//    def builder = new GHReleaseBuilder(repo, version)
//    builder.name("[$minecraft_version] $mod_name $mod_version")
//    builder.body(file(".github/changelog.md").text)
//    builder.commitish(getBranch())
//    builder.prerelease(prerelease == "true")
//
//    def release = builder.create()
//    release.uploadAsset(remapJar.archiveFile.get().getAsFile(), "application/java-archive")
//  }
//}

githubRelease {
  token = System.getenv("GITHUB_TOKEN").toString()
  owner = System.getenv("GITHUB_OWNER").toString() // "Kings-World"
  repo = System.getenv("GITHUB_REPO").toString() // "fabric-mod"
  targetCommitish = System.getenv("GITHUB_REF_NAME").toString() // "main"
  body = file(".github/changelog.md").text
  releaseAssets = remapJar.archiveFile.get()
  releaseName = "[$minecraft_version] $mod_name $mod_version"
  tagName = mod_version
}

tasks.githubRelease.configure {
  group = "publishing"
  onlyIf { System.getenv("GITHUB_TOKEN") }
  dependsOn(build)
}

modrinth {
  projectId = modrinth_id
  versionNumber = version
  versionType = release_type
  versionName = "[$minecraft_version] $mod_name $mod_version"
  uploadFile = remapJar
  gameVersions = [minecraft_version]
  loaders = ["fabric"]
  changelog = file(".github/changelog.md").text
  syncBodyFrom = file("README.md").text
  dependencies {
    required.project "P7dR8mSH" // Fabric-API
    // required.version "Zp275COe" // Fabric-API 0.57.0+1.19
    optional.project "Vebnzrzj" // LuckPerms
  }
}

tasks.modrinth.configure {
  group = "publishing"
  onlyIf { System.getenv("MODRINTH_TOKEN") }
  dependsOn(build, modrinthSyncBody)
}

task publishToModSites {
  group = "publishing"
  dependsOn(modrinth)
}

// credits to https://github.com/axieum/minecord/blob/main/minecord-api/build.gradle
// i have added minimize() to keep the jar as small as it can be
shadowJar {
  minimize()
  configurations = [project.configurations.shadow]
}

// credits to https://github.com/axieum/minecord/blob/main/minecord-api/build.gradle
remapJar {
  dependsOn tasks.shadowJar
  inputFile.set(tasks.shadowJar.archiveFile)
}
